from abc import ABC, abstractmethod

from typing import (Dict,
                    Any, 
                    Optional, 
                    Type, 
                    List, 
                    Tuple)

import uuid
from pychunk.nodes.types import (NodeRelationshipType, 
                                 NodeType)


class BaseNode(ABC):
    
    def __init__(self, 
                 text: str, 
                 file: str, 
                 node_type: NodeType, 
                 metadata: Optional[Dict[str, Any]] | None = None, 
                 id: Optional[str] | None = None, 
                 node_relationships: Optional[Dict[str, List[Tuple[Type['BaseNode'], int | None]]]] | None = None):
        """_summary_

        Args:
            text (str): Block of code
            node_type (NodeType): Type of the node
            id (Optional[str] | None, optional): unique identifier of the node. Autogenerated if no specified
            metadata (Dict[str, Any]): Additional metadata of your nodes
            node_relationship (Optional[NodeRelationshipType] | None, optional): type of node relationship-like
        Raises:
            TypeError: Raise if node_type is not NodeType type
        """
        
        if not isinstance(node_type, NodeType):
            raise TypeError(f"Argument node_type must be NodeType. Right now is: {type(node_type)}")
        
        self.__uuid = id if id else str(uuid.uuid4())
        self._text = text
        self._file = file
        self._type = node_type
        self.__node_relationships = {} if node_relationships is None else node_relationships
        self._metadata = {} if metadata is None else metadata
        
    @property
    def id(self):
        return self.__uuid
    
    @property
    def content(self):
        return self._text
    
    @property
    def file(self):
        return self._file
    
    @property
    def node_type(self):
        return self._type
    
    @property
    def metadata(self):
        return self._metadata
    
    @property
    def relationships(self):
        return self.__node_relationships
    
    @metadata.setter
    def metadata(self, metadata: Dict[str, Any]) -> None:
        self._metadata = metadata
        
    def add_relationship(self, node: Type['BaseNode'], relationship_type: NodeRelationshipType, line_of_occurence: Optional[int] | None = None) -> None:
        relationship_type = relationship_type.value
        if relationship_type not in self.__node_relationships: 
            self.__node_relationships[relationship_type] = {node.id: [line_of_occurence]}
        else: 
            if node.id in self.__node_relationships[relationship_type]: 
                self.__node_relationships[relationship_type][node.id].append(line_of_occurence)
            else:
                self.__node_relationships[relationship_type][node.id] = [line_of_occurence]
        
    def filter_relationships(self, relationship_type: NodeRelationshipType) -> Dict[str, List[int]]:
        relationship_type = relationship_type.value
        filtered_relationships = [rel for rel_type, rel in self.__node_relationships.items() if rel_type == relationship_type]
        if len(filtered_relationships) > 0:
            return filtered_relationships[0]
        return {}
    
    def check_relationship(self, node: Type['BaseNode'], relationship_type: NodeRelationshipType) -> bool:
        try:
            return node.id in self.__node_relationships[relationship_type.value]
        except KeyError:
            return False
        
    def __repr__(self) -> str:
        return f"BaseNode(node_type = {self.node_type}, metadata = {self.metadata})"
        
    def __str__(self) -> str:
        return super().__str__()
    
    def __eq__(self, node: Type['BaseNode']) -> bool:
        return node.id == self.id
    

class BaseNodeRelationship(ABC):
    
    def __init__(self, node: BaseNode):
        self._node = node
        
        self._parent = None
        self._childs = []
        self._prev = None
        self._next = None
        self._other = {}
        
    @abstractmethod
    def create_relationship(self, node: BaseNode) -> None:
        pass
    